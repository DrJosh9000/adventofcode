package main

import (
	"bytes"
	"fmt"
	"image"
	"log"
	"os"
)

func main() {
	input, err := os.ReadFile("inputs/24.txt")
	if err != nil {
		log.Fatalf("Couldn't read input: %v", err)
	}

	// x and y absolute, z relative
	neigh := map[image.Point][]pt{
		{0, 0}: {{1, 0, 0}, {0, 1, 0}, {2, 1, -1}, {1, 2, -1}},
		{1, 0}: {{0, 0, 0}, {2, 0, 0}, {1, 1, 0}, {2, 1, -1}},
		{2, 0}: {{1, 0, 0}, {3, 0, 0}, {2, 1, 0}, {2, 1, -1}},
		{3, 0}: {{2, 0, 0}, {4, 0, 0}, {3, 1, 0}, {2, 1, -1}},
		{4, 0}: {{3, 0, 0}, {4, 1, 0}, {2, 1, -1}, {3, 2, -1}},

		{0, 1}: {{0, 0, 0}, {1, 1, 0}, {0, 2, 0}, {1, 2, -1}},
		{1, 1}: {{1, 0, 0}, {0, 1, 0}, {2, 1, 0}, {1, 2, 0}},
		{2, 1}: {{2, 0, 0}, {1, 1, 0}, {3, 1, 0}, {0, 0, 1}, {1, 0, 1}, {2, 0, 1}, {3, 0, 1}, {4, 0, 1}},
		{3, 1}: {{3, 0, 0}, {2, 1, 0}, {4, 1, 0}, {3, 2, 0}},
		{4, 1}: {{4, 0, 0}, {3, 1, 0}, {4, 2, 0}, {3, 2, -1}},

		{0, 2}: {{0, 1, 0}, {1, 2, 0}, {0, 3, 0}, {1, 2, -1}},
		{1, 2}: {{1, 1, 0}, {0, 2, 0}, {1, 3, 0}, {0, 0, 1}, {0, 1, 1}, {0, 2, 1}, {0, 3, 1}, {0, 4, 1}},
		// [inner layer]
		{3, 2}: {{3, 1, 0}, {4, 2, 0}, {3, 3, 0}, {4, 0, 1}, {4, 1, 1}, {4, 2, 1}, {4, 3, 1}, {4, 4, 1}},
		{4, 2}: {{4, 1, 0}, {3, 2, 0}, {4, 3, 0}, {3, 2, -1}},

		{0, 3}: {{0, 2, 0}, {1, 3, 0}, {0, 4, 0}, {1, 2, -1}},
		{1, 3}: {{1, 2, 0}, {0, 3, 0}, {2, 3, 0}, {1, 4, 0}},
		{2, 3}: {{1, 3, 0}, {3, 3, 0}, {2, 4, 0}, {0, 4, 1}, {1, 4, 1}, {2, 4, 1}, {3, 4, 1}, {4, 4, 1}},
		{3, 3}: {{3, 2, 0}, {2, 3, 0}, {4, 3, 0}, {3, 4, 0}},
		{4, 3}: {{4, 2, 0}, {3, 3, 0}, {4, 4, 0}, {3, 2, -1}},

		{0, 4}: {{0, 3, 0}, {1, 4, 0}, {2, 3, -1}, {1, 2, -1}},
		{1, 4}: {{1, 3, 0}, {0, 4, 0}, {2, 4, 0}, {2, 3, -1}},
		{2, 4}: {{2, 3, 0}, {1, 4, 0}, {3, 4, 0}, {2, 3, -1}},
		{3, 4}: {{3, 3, 0}, {2, 4, 0}, {4, 4, 0}, {2, 3, -1}},
		{4, 4}: {{4, 3, 0}, {3, 4, 0}, {2, 3, -1}, {3, 2, -1}},
	}

	w := make(world)
	for y, row := range bytes.Split(input, []byte{'\n'}) {
		for x, b := range row {
			if b == '#' {
				w.add(pt{x, y, 0})
			}
		}
	}

	for i := 0; i < 200; i++ {
		cons := make(world)
		for p := range w {
			cons[p] = struct{}{}
			for _, d := range neigh[image.Pt(p.x, p.y)] {
				cons.add(p.add(d))
			}
		}
		nw := make(world)
		for p := range cons {
			n := 0
			for _, d := range neigh[image.Pt(p.x, p.y)] {
				if w.bug(p.add(d)) {
					n++
				}
			}
			if n == 1 || (!w.bug(p) && n == 2) {
				nw.add(p)
			}
		}
		w = nw
	}
	fmt.Println(len(w))
}

type world map[pt]struct{}

func (w world) add(p pt) {
	w[p] = struct{}{}
}

func (w world) bug(p pt) bool {
	_, b := w[p]
	return b
}

type pt struct {
	x, y, z int
}

func (p pt) add(q pt) pt {
	return pt{q.x, q.y, p.z + q.z}
}
